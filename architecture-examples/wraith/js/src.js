// Generated by CoffeeScript 1.6.2
(function() {
  var root, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Wraith.Models.ListItem = (function(_super) {
    __extends(ListItem, _super);

    function ListItem() {
      _ref = ListItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ListItem.field('text', {
      "default": 'New Item'
    });

    ListItem.field('completed', {
      "default": false
    });

    ListItem.field('editing', {
      "default": false
    });

    return ListItem;

  })(Wraith.Model);

  Wraith.Models.List = (function(_super) {
    __extends(List, _super);

    function List() {
      this.removeCompleted = __bind(this.removeCompleted, this);
      this.setCompleted = __bind(this.setCompleted, this);
      this.remainingCount = __bind(this.remainingCount, this);
      this.completedCount = __bind(this.completedCount, this);      _ref1 = List.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    List.hasMany(Wraith.Models.ListItem, {
      as: 'items'
    });

    List.prototype.completedCount = function() {
      return this.get('items').all().reduce((function(prev, cur) {
        return prev + (cur.get('completed') ? 1 : 0);
      }), 0);
    };

    List.prototype.remainingCount = function() {
      return this.get('items').length() - this.completedCount();
    };

    List.prototype.setCompleted = function(completed) {
      var i, item, items, _i, _len;

      items = this.get('items').all();
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        item.set('completed', completed);
      }
      return this;
    };

    List.prototype.removeCompleted = function() {
      var i, item, items, _i, _len;

      items = this.get('items').all();
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        if (item.get('completed')) {
          this.get('items').remove(item.get('_id'));
        }
      }
      return this;
    };

    return List;

  })(Wraith.Model);

  Wraith.Controllers.TodoManager = (function(_super) {
    __extends(TodoManager, _super);

    function TodoManager() {
      this.inputKeypress = __bind(this.inputKeypress, this);
      this.toggleAll = __bind(this.toggleAll, this);
      this.itemKeypress = __bind(this.itemKeypress, this);
      this.itemEdit = __bind(this.itemEdit, this);
      this.itemDelete = __bind(this.itemDelete, this);
      this.updateToggleState = __bind(this.updateToggleState, this);
      this.itemToggle = __bind(this.itemToggle, this);      _ref2 = TodoManager.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    TodoManager.prototype.init = function() {
      TodoManager.__super__.init.call(this);
      this.list = this.registerModel(new Wraith.Models.List, 'list');
      this.items = this.list.get('items');
      this.items.create({
        text: 'Create a TodoMVC template',
        completed: true
      });
      this.items.create({
        text: 'Rule the web'
      });
      return this.items.create({
        text: 'Finish wraith'
      });
    };

    TodoManager.prototype.itemToggle = function(e) {
      e.model.set('completed', !e.model.get('completed'));
      return this.updateToggleState();
    };

    TodoManager.prototype.updateToggleState = function() {
      var $toggleAll;

      $toggleAll = this.$els['toggle-all'];
      if (this.items.length() === this.list.completedCount()) {
        return $toggleAll.checked = true;
      } else if (this.list.remainingCount() !== 0) {
        return $toggleAll.checked = false;
      }
    };

    TodoManager.prototype.itemDelete = function(e) {
      this.items.remove(e.model.get('_id'));
      return this.updateToggleState();
    };

    TodoManager.prototype.itemEdit = function(e) {
      return e.model.set('editing', !e.model.get('editing'));
    };

    TodoManager.prototype.itemKeypress = function(e) {
      var val;

      if (!(e.keyCode === 13 && (val = e.currentTarget.value) !== '')) {
        return;
      }
      e.model.set('text', val);
      return e.model.set('editing', false);
    };

    TodoManager.prototype.toggleAll = function(e) {
      var checked;

      checked = !e.currentTarget.checked;
      return this.list.setCompleted(!checked);
    };

    TodoManager.prototype.inputKeypress = function(e) {
      var val;

      if (!(e.keyCode === 13 && (val = e.currentTarget.value) !== '')) {
        return;
      }
      this.items.create({
        text: val
      });
      e.currentTarget.value = '';
      return this.updateToggleState();
    };

    return TodoManager;

  })(Wraith.Controller);

}).call(this);
