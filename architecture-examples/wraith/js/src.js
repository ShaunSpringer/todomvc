// Generated by CoffeeScript 1.6.2
(function() {
  var root, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Wraith.Models.ListItem = (function(_super) {
    __extends(ListItem, _super);

    function ListItem() {
      _ref = ListItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ListItem.field('text', {
      "default": 'New Item'
    });

    ListItem.field('completed', {
      "default": false
    });

    ListItem.field('editing', {
      "default": false
    });

    return ListItem;

  })(Wraith.Model);

  Wraith.Models.List = (function(_super) {
    __extends(List, _super);

    function List() {
      this.removeCompleted = __bind(this.removeCompleted, this);
      this.setCompleted = __bind(this.setCompleted, this);
      this.remainingCount = __bind(this.remainingCount, this);
      this.completedCount = __bind(this.completedCount, this);      _ref1 = List.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    List.hasMany(Wraith.Models.ListItem, {
      as: 'items'
    });

    List.prototype.completedCount = function() {
      return this.get('items').all().reduce((function(prev, cur) {
        return prev + (cur.get('completed') ? 1 : 0);
      }), 0);
    };

    List.prototype.remainingCount = function() {
      return this.get('items').length() - this.completedCount();
    };

    List.prototype.setCompleted = function(completed) {
      var i, item, items, _i, _len;

      items = this.get('items').all();
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        item.set('completed', completed);
      }
      return this;
    };

    List.prototype.removeCompleted = function() {
      var i, item, items, _i, _len;

      items = this.get('items').all();
      for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
        item = items[i];
        if (item.get('completed')) {
          this.get('items').remove(item.get('_id'));
        }
      }
      return this;
    };

    return List;

  })(Wraith.Model);

  Wraith.Views.TodoList = (function(_super) {
    __extends(TodoList, _super);

    function TodoList() {
      _ref2 = TodoList.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return TodoList;

  })(Wraith.View);

  Wraith.Controllers.TodoManager = (function(_super) {
    __extends(TodoManager, _super);

    function TodoManager() {
      this.inputKeypress = __bind(this.inputKeypress, this);
      this.toggleAll = __bind(this.toggleAll, this);
      this.itemKeypress = __bind(this.itemKeypress, this);
      this.itemEdit = __bind(this.itemEdit, this);
      this.itemDelete = __bind(this.itemDelete, this);
      this.itemToggle = __bind(this.itemToggle, this);
      this.getDataFromEl = __bind(this.getDataFromEl, this);      _ref3 = TodoManager.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    TodoManager.prototype.view_events = [
      {
        type: 'click',
        selector: 'button.destroy',
        cb: 'itemDelete'
      }, {
        type: 'click',
        selector: '#todo-list input[type=checkbox]',
        cb: 'itemToggle'
      }, {
        type: 'dblclick',
        selector: 'label',
        cb: 'itemEdit'
      }, {
        type: 'keypress',
        selector: 'input.edit',
        cb: 'itemKeypress'
      }, {
        type: 'change',
        selector: '#toggle-all',
        cb: 'toggleAll'
      }, {
        type: 'keypress',
        selector: 'input#new-todo',
        cb: 'inputKeypress'
      }
    ];

    TodoManager.prototype.init = function() {
      var items, list;

      TodoManager.__super__.init.call(this);
      this.registerModel('list', new Wraith.Models.List);
      list = this.models['list'];
      items = list.get('items');
      items.create({
        text: 'Create a TodoMVC template',
        completed: true
      });
      items.create({
        text: 'Rule the web'
      });
      return items.create({
        text: 'Finish wraith'
      });
    };

    TodoManager.prototype.getDataFromEl = function(el) {
      var $view, id, items, list;

      $view = this.findViewByElement(el);
      id = this.findIdByView($view);
      list = this.models['list'];
      items = list.get('items');
      return {
        items: items,
        list: list,
        id: id
      };
    };

    TodoManager.prototype.itemToggle = function(e) {
      var id, item, items, list, target, _ref4;

      _ref4 = this.getDataFromEl(e.currentTarget), items = _ref4.items, list = _ref4.list, id = _ref4.id;
      item = items.findById(id);
      item.set('completed', !item.get('completed'));
      target = item;
      if (items.length() === list.completedCount()) {
        this.$els['toggle-all'].attr('checked', true);
      } else if (list.remainingCount() !== 0) {
        this.$els['toggle-all'].attr('checked', false);
      }
      return this;
    };

    TodoManager.prototype.itemDelete = function(e) {
      var id, items, list, _ref4;

      _ref4 = this.getDataFromEl(e.currentTarget), items = _ref4.items, list = _ref4.list, id = _ref4.id;
      return items.remove(id);
    };

    TodoManager.prototype.itemEdit = function(e) {
      var id, item, items, list, _ref4;

      _ref4 = this.getDataFromEl(e.currentTarget), items = _ref4.items, list = _ref4.list, id = _ref4.id;
      item = items.findById(id);
      return item.set('editing', !item.get('editing'));
    };

    TodoManager.prototype.itemKeypress = function(e) {
      var id, item, items, list, val, _ref4;

      if (!(e.keyCode === 13 && (val = e.currentTarget.value) !== '')) {
        return;
      }
      _ref4 = this.getDataFromEl(e.currentTarget), items = _ref4.items, list = _ref4.list, id = _ref4.id;
      item = items.findById(id);
      item.set('text', val);
      return item.set('editing', false);
    };

    TodoManager.prototype.toggleAll = function(e) {
      var checked, list;

      checked = e.currentTarget.checked;
      list = this.models['list'];
      list.setCompleted(checked);
      return this.$els['toggle-all'].attr('checked', checked);
    };

    TodoManager.prototype.inputKeypress = function(e) {
      var id, items, list, val, _ref4;

      if (!(e.keyCode === 13 && (val = e.currentTarget.value) !== '')) {
        return;
      }
      _ref4 = this.getDataFromEl(e.currentTarget), items = _ref4.items, list = _ref4.list, id = _ref4.id;
      items.create({
        text: val
      });
      return e.currentTarget.value = '';
    };

    return TodoManager;

  })(Wraith.Controller);

}).call(this);
